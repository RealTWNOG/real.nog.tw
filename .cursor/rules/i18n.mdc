---
description: 
globs: 
alwaysApply: true
---
 # 多語言檔案 (i18n) 維護指南

此專案使用客戶端導向的多語言支援解決方案，適用於 Next.js 靜態匯出 (`output: export`) 模式。

## 架構概覽

- **語言定義**：位於 `i18n.ts` 中定義支援的語言及預設語言
- **翻譯檔案**：位於 `messages/` 目錄下的 JSON 檔案，依語言代碼命名
- **客戶端語言切換**：使用 localStorage 儲存用戶語言偏好

## 語言檔案位置與結構

語言檔案位於 `messages/{locale}.json`，例如：
- `messages/zh-TW.json` - 繁體中文（台灣）
- `messages/en.json` - 英文

每個語言檔案使用以下結構：

```json
{
  "命名空間1": {
    "key1": "翻譯文字1",
    "key2": "翻譯文字2"
  },
  "命名空間2": {
    "key3": "翻譯文字3",
    "key4": "翻譯文字4"
  }
}
```

## 如何新增或修改翻譯

### 新增支援的語言

1. 在 `i18n.ts` 中的 `locales` 陣列添加新語言代碼
2. 在 `messages/` 目錄下建立對應的翻譯檔案
3. 在 `LanguageSwitcher.tsx` 中添加語言顯示名稱

```typescript
// i18n.ts
export const locales = ["en", "zh-TW", "ja"] as const; // 添加日文
```

### 新增翻譯字串

在相應的語言檔案中添加新的字串：

1. 如果是新功能，建議創建新的命名空間
2. 確保所有語言檔案都有相同的鍵值結構
3. 保持命名空間和鍵名有意義且一致

### 使用插值參數

翻譯字串可以包含佔位符：

```json
{
  "Welcome": {
    "greeting": "你好，{name}！"
  }
}
```

在代碼中使用：

```tsx
const { t } = useTranslation("Welcome");
t("greeting", { name: "世界" }); // 輸出：你好，世界！
```

## 使用翻譯的方法

### 在組件中使用翻譯

```tsx
"use client";

import { useTranslation } from "@/app/hooks/useTranslation";

export default function MyComponent() {
  const { t, locale } = useTranslation("MyNamespace");
  
  return (
    <div>
      <h1>{t("title")}</h1>
      <p>{t("description")}</p>
      <p>當前語言：{locale}</p>
    </div>
  );
}
```

### 添加新的命名空間

請遵循已有的命名空間風格，建議使用：

- 功能區塊命名（例如：`Auth`、`Dashboard`、`Settings`）
- 或組件名稱（例如：`Navbar`、`Footer`、`Modal`）
- 通用字串放在 `Common` 命名空間中

## 注意事項和最佳實踐

1. **保持一致性**：所有語言檔案應擁有相同的鍵值結構
2. **避免硬編碼文字**：所有顯示給用戶的文字都應來自翻譯檔案
3. **定期同步**：當添加新功能時，同時更新所有語言的翻譯
4. **使用語意化命名**：鍵名應該反映其內容，而非過於通用
5. **檢查缺漏**：定期檢查是否有未翻譯的字串
6. **考慮文化因素**：翻譯不僅是語言轉換，也應考慮文化習慣

## 故障排除

1. **翻譯不顯示**：檢查命名空間和鍵名是否正確
2. **獲得警告**：控制台顯示「不存在的命名空間」或「不存在的鍵」時，檢查相應的語言檔案
3. **語言切換不生效**：檢查 localStorage 權限和語言代碼是否正確

---

這個專案使用的是客戶端翻譯解決方案，適合靜態網站和頁面不多的專案。對於大型應用，可以考慮使用伺服器端翻譯或擴展此方案以支援動態載入翻譯檔案。